(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{616:function(t,e,v){"use strict";v.r(e);var a=v(71),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"主流浏览器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主流浏览器"}},[t._v("#")]),t._v(" 主流浏览器")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("内核")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("IE")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("Trident")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit -> Blink")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("FireFox")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("Gecko")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Safari")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Opera")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("Presto -> Webkit -> Blink")])])])]),t._v(" "),v("h2",{attrs:{id:"浏览器工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("加载")]),t._v(" "),v("ol",[v("li",[t._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),t._v(" "),v("li",[t._v("向这个 IP 的机器发送 HTTP 请求")]),t._v(" "),v("li",[t._v("服务器收到、处理并返回 HTTP 请求")]),t._v(" "),v("li",[t._v("浏览器得到并返回内容")])])]),t._v(" "),v("li",[v("p",[t._v("渲染")]),t._v(" "),v("ol",[v("li",[t._v("根据 HTML 结构生成 DOM 树")]),t._v(" "),v("li",[t._v("根据 CSS 生成 CSSOM")]),t._v(" "),v("li",[t._v("将 DOM 和 CSSOM 整合形成 Render Tree")]),t._v(" "),v("li",[t._v("根据 Render Tree 开始渲染和展示")]),t._v(" "),v("li",[t._v("遇到"),v("code",[t._v("script")]),t._v("标签时，会执行并阻塞渲染")])])]),t._v(" "),v("li",[v("p",[t._v("Web 安全")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("SQL 注入：")]),t._v(" "),v("p",[t._v("输入时进行了恶意的 SQL 拼接，导致最后生成的 SQL 有问题，典型的例子就是对 SQL 语句进行字符串拼接的时候没有对用户输入的内容进行转译，如果用户在语句中添加 delete 等关键字就会造成影响")]),t._v(" "),v("p",[t._v("预防：正确使用参数化绑定 sql 变量")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("1、过滤用户输入参数中的特殊字符，降低风险\n2、禁止通过字符串拼接sql语句，要严格使用参数绑定来传入参数\n3、合理利用数据库框架提供的机制\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])])]),t._v(" "),v("li",[v("p",[t._v("XSS(跨站脚本攻击)：")]),t._v(" "),v("p",[t._v("通过某种方式（发布文章、评论）等将一段特定的 JS 代码隐蔽的输入进去，JS 代码一旦执行，就可以获取服务端数据、cookie 等")]),t._v(" "),v("p",[t._v("预防：用正则替换，cookie 设置 HttpOnly 属性(禁止页面的 Javascript 访问带有 HttpOnly 属性的 Cookie )")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("< 替换为：&lt;\n> 替换为：&gt;\n& 替换为：&amp;\n‘ 替换为：&#x27;\n” 替换为：&quot;\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br")])])]),t._v(" "),v("li",[v("p",[t._v("CSRF(跨站请求伪造)：")]),t._v(" "),v("p",[t._v("借助了 cookie 的特性，劫持操作者的权限来完成某个操作，而不是拿到用户的信息")]),t._v(" "),v("p",[t._v("预防： 加入各个层级的权限验证")])])])])]),t._v(" "),v("h2",{attrs:{id:"浏览器缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),v("blockquote",[v("p",[t._v("浏览器缓存过程")]),t._v(" "),v("ol",[v("li",[t._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")]),t._v(" "),v("li",[t._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("缓存位置")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Service Worker")]),t._v(" "),v("ul",[v("li",[t._v("运行在浏览器背后的独立线程，一般可以用来实现缓存功能")]),t._v(" "),v("li",[t._v("传输协议必须为 HTTPS，因为 Service Worker 中涉及到请求拦截，用 HTTPS 保障安全")]),t._v(" "),v("li",[t._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的")]),t._v(" "),v("li",[t._v("Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就直接读取缓存文件，否则就去请求数据")]),t._v(" "),v("li",[t._v("当 Service Worker 没有命中缓存的时候，会根据缓存查找优先级去查找数据")])])]),t._v(" "),v("li",[v("p",[t._v("Memory Cache")]),t._v(" "),v("p",[t._v("内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等，读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，但是缓存持续性很短，会随着进程的释放而释放，一旦关闭 tab 页，内存中的缓存也就被释放了")])]),t._v(" "),v("li",[v("p",[t._v("Disk Cache")]),t._v(" "),v("p",[t._v("磁盘缓存，容量和时效性比 Memory Cache 强，也是所有浏览器缓存中覆盖面最大的，可以根据 HTTP 头信息设置网页是否缓存，并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据")])]),t._v(" "),v("li",[v("p",[t._v("Push Cache")]),t._v(" "),v("p",[t._v("推送缓存，是 HTTP/2 中的内容，当以上三种缓存都没有命中时才会使用，它只在会话(session)中存在，一旦会话结束就被释放，并且缓存时间也很短暂，Chrome 中只有五分钟左右，同时也并非严格执行 HTTP 头部中缓存指令")])])])]),t._v(" "),v("li",[v("p",[t._v("强缓存")]),t._v(" "),v("p",[t._v("不会向服务器发送请求，直接从缓存中读取资源，在 Chrome 控制台的 network 中可以看到该请求返回 200 的状态码，并且 size 显示 from disk cache 或 from memory cache，强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Expires")]),t._v(" "),v("p",[t._v("缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。")]),t._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("Expires"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Wed"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" May "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("06")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("06")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("这个表示资源在这个时间过期，过期之后就得向服务器发请求，Expires 是 HTTP/1.0 的产物，受限于本地时间，如果修改了本地时间，就会造成缓存失效")])]),t._v(" "),v("li",[v("p",[t._v("Cache-Control")]),t._v(" "),v("p",[t._v("在 HTTP/1.1 中，采用了 Cache-Control，和 Expires 不同的是没有采用过期时间这种方式，而是采用过期时长来控制缓存，对应的字段是 max-age")]),t._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("Cache"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("max"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("table",[v("thead",[v("tr",[v("th",[t._v("指令")]),t._v(" "),v("th",[t._v("作用")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("public")]),t._v(" "),v("td",[t._v("表示响应可以被客户端和代理服务器缓存")])]),t._v(" "),v("tr",[v("td",[t._v("private")]),t._v(" "),v("td",[t._v("表示响应只可以被客户端缓存")])]),t._v(" "),v("tr",[v("td",[t._v("max-age=30")]),t._v(" "),v("td",[t._v("缓存 30 秒后就过期，需要重新请求")])]),t._v(" "),v("tr",[v("td",[t._v("s-maxage=30")]),t._v(" "),v("td",[t._v("覆盖 max-age，作用一样，只在代理服务器中生效，优先级高于 max-age")])]),t._v(" "),v("tr",[v("td",[t._v("no-store")]),t._v(" "),v("td",[t._v("不缓存任何响应")])]),t._v(" "),v("tr",[v("td",[t._v("no-cache")]),t._v(" "),v("td",[t._v("跳过当前的强缓存，发送 HTTP 请求，即直接进入协商缓存阶段")])]),t._v(" "),v("tr",[v("td",[t._v("max-stale=30")]),t._v(" "),v("td",[t._v("30 秒内，即使缓存过期，也使用该缓存")])]),t._v(" "),v("tr",[v("td",[t._v("min-fresh=30")]),t._v(" "),v("td",[t._v("希望在 30 秒内获取最新的响应")])])])])]),t._v(" "),v("li",[v("p",[t._v("其实这两者差别不大，区别就在于 Expires 是 http1.0 的产物，Cache-Control 是 http1.1 的产物，当"),v("strong",[t._v("Expires")]),t._v("和"),v("strong",[t._v("Cache-Control")]),t._v("同时存在的时候，"),v("strong",[t._v("Cache-Control")]),t._v("会优先考虑")])])])]),t._v(" "),v("li",[v("p",[t._v("协商缓存")]),t._v(" "),v("p",[t._v("强制缓存失效后，浏览器在请求头中携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，这种缓存标识分为两种："),v("strong",[t._v("Last-Modified")]),t._v(" 和 "),v("strong",[t._v("ETag")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Last-Modified")]),t._v(" "),v("p",[t._v("即最后修改时间，浏览器在第一次访问资源时，服务器返回资源的同时，在 response header 中添加 Last-Modified 的 header，值是这个资源在服务器上的最后修改时间，浏览器接收缓存文件和 header；")]),t._v(" "),v("p",[t._v("浏览器下一次请求这个资源，浏览器检测到有 Last-Modified 这个 header，于是添加 If-Modified-Since 这个 header，值就是 Last-Modified 的值，服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回 304 和空的响应体，直接从缓存读取，如果 If-Modified-Since 的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和 200")]),t._v(" "),v("p",[t._v("弊端：")]),t._v(" "),v("ul",[v("li",[t._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源")]),t._v(" "),v("li",[t._v("因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源")])])]),t._v(" "),v("li",[v("p",[t._v("ETag")]),t._v(" "),v("p",[t._v("Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识（服务器生成），只要资源有变化，Etag 就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 Etag 值放到 request header 里的 If-None-Match 里，服务器只需要比较客户端传来的 If-None-Match 和自己服务器上该资源的 Etag 是否一致，就能判断资源相对客户端而言是否被修改过了，如果服务器发现 Etag 匹配不上，那么就会返回新的资源，和常规的 HTTP 请求响应流程一样，如果 Etag 是一致的，则直接返回 304 使用本地缓存")])]),t._v(" "),v("li",[v("p",[t._v("两者对比")]),t._v(" "),v("ul",[v("li",[t._v("精确度上，Etag 要优于 Last-Modified，Last-Modified 的时间单位是秒，如果某个文件在 1 秒内改变了多次，那么他们的 Last-Modified 其实并没有体现出来修改，但是 Etag 每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的 Last-Modified 也有可能不一致。")]),t._v(" "),v("li",[t._v("性能上，Etag 要逊于 Last-Modified，Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash 值。")]),t._v(" "),v("li",[t._v("优先级上，服务器校验优先考虑 Etag")])])])])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"http://feg.netease.com/archives/680.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP header 探索"),v("OutboundLink")],1)])]),t._v(" "),v("li",[v("p",[t._v("缓存机制")]),t._v(" "),v("p",[t._v("强制缓存优先于协商缓存，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since 和 Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器缓存中，生效则返回 304，继续使用缓存")])]),t._v(" "),v("li",[v("p",[t._v("用户行为对浏览器缓存的影响")]),t._v(" "),v("ul",[v("li",[t._v("打开网页，地址栏输入地址：查找 disk cache 中是否有匹配，有则使用，没有则发送请求")]),t._v(" "),v("li",[t._v("普通刷新(F5)：因为 tab 页没有关闭，可以使用 memory cache，如果匹配的话被优先使用，其次才是 disk cache")]),t._v(" "),v("li",[t._v("强制刷新(Ctrl + F5)：浏览器不使用缓存，因此发送的请求头均带有 Cache-Control:no-cache，服务器直接返回 200 和最新内容")])])])]),t._v(" "),v("h2",{attrs:{id:"dns-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dns-缓存"}},[t._v("#")]),t._v(" DNS 缓存")]),t._v(" "),v("ul",[v("li",[t._v("DNS：Domain Name System ,即域名系统")]),t._v(" "),v("li",[t._v("DNS 解析：通过域名最终得到该域名对应的 IP 地址，也叫域名解析")]),t._v(" "),v("li",[t._v("DNS 缓存：有 DNS 的地方就有缓存，浏览器、操作系统、Local DNS、根域名服务器\n"),v("ol",[v("li",[t._v("首先搜索浏览器自身的 DNS 缓存，如果存在，则域名解析到此完成")]),t._v(" "),v("li",[t._v("如果浏览器自身的缓存中没有找到对应的条目，那么会尝试读取操作系统的 hosts 文件，看是否存在对应映射关系")]),t._v(" "),v("li",[t._v("如果本地 hosts 文件不存在对应映射关系，则查找本地 DNS 服务器")]),t._v(" "),v("li",[t._v("如果本地 DNS 服务器还没找到的话,它就会向根服务器发出请求,进行递归查询")])])])]),t._v(" "),v("h2",{attrs:{id:"cdn-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cdn-缓存"}},[t._v("#")]),t._v(" CDN 缓存")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("CDN：Content Delivery Network,即内容分发网络")]),t._v(" "),v("p",[t._v("简单的理解就是 CDN 会选择一个离用户最近的 CDN 边缘节点来响应用户的请求")])]),t._v(" "),v("li",[v("p",[t._v("CDN 缓存：即在浏览器本地缓存失效后，浏览器会向 CDN 边缘节点发送请求，类似浏览器缓存，CDN 边缘节点也存在一套缓存机制，CDN 边缘节点缓存策略因服务商不同而不同，但一般都会遵循 http 标准协议，通过 http 响应头中的 Cache-control 字段来设置 CDN 边缘节点数据缓存时间")]),t._v(" "),v("p",[t._v("当浏览器向 CDN 节点请求数据时，CDN 节点会判断缓存数据是否过期，若缓存数据并没有过期，则直接将缓存数据返回给客户端，否则，CDN 节点就会向服务器发出回源请求，从服务器拉取最新数据，更新本地缓存，并将最新数据返回给客户端")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);